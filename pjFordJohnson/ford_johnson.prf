(fjnode)
(fj
 (log_exp_TCC1 0
  (log_exp_TCC1-1 nil 3734217614 ("" (subtype-tcc) nil nil) nil
   shostak))
 (log_exp_TCC2 0
  (log_exp_TCC2-1 nil 3734217614
   ("" (lemma "increasing_expt_aux")
    (("" (skeep)
      (("" (case "n >= 2")
        (("1" (inst -2 "b" "n-2")
          (("1" (assert)
            (("1" (expand "^") (("1" (assert) nil nil)) nil)) nil)
           ("2" (assert) nil nil))
          nil)
         ("2" (hide -)
          (("2" (case-replace "n=0")
            (("1" (grind) nil nil)
             ("2" (case-replace "n=1")
              (("1" (grind) nil nil) ("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (expt def-decl "real" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (n skolem-const-decl "nat" fj nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (above nonempty-type-eq-decl nil integers nil)
    (^ const-decl "real" exponentiation nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (increasing_expt_aux formula-decl nil exponentiation nil))
   shostak))
 (log_exp 0
  (log_exp-1 nil 3732007780
   ("" (skeep)
    (("" (lemma "log_nat_bounds")
      (("" (typepred "b")
        (("" (inst -2 "b" "b ^ n")
          (("" (expand "logb" 1)
            (("" (beta)
              (("" (prop)
                (("" (name-replace "ll" "log_nat(b ^ n, b)`1")
                  (("" (lemma "both_sides_expt_gt1_lt")
                    (("" (inst?)
                      (("" (assert)
                        (("" (lemma "both_sides_expt_gt1_le")
                          (("" (inst?) (("" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((log_nat_bounds formula-decl nil log_nat "reals/")
    (posint_exp application-judgement "posint" exponentiation nil)
    (>= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (log_nat def-decl "[n: nat, {y | y < p AND x = p ^ n * y}]" log_nat
     "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_expt_gt1_le formula-decl nil exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (both_sides_expt_gt1_lt formula-decl nil exponentiation nil)
    (logb const-decl "nat" fj nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (above nonempty-type-eq-decl nil integers nil))
   shostak))
 (is_sorted?_TCC1 0
  (is_sorted?_TCC1-1 nil 3718042630 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (fjnode type-decl nil fjnode_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" fjnode_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (occurrencesInList_TCC1 0
  (occurrencesInList_TCC1-1 nil 3718744461 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[fjnode[nat]](0)" fj nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (fjnode type-decl nil fjnode_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (every adt-def-decl "boolean" fjnode_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak))
 (occurrencesInList_TCC2 0
  (occurrencesInList_TCC2-1 nil 3718744461
   ("" (skeep)
    (("" (typepred "y")
      (("" (hide -1)
        (("" (inst -1 "0")
          (("1" (expand "nth" -1)
            (("1" (skeep)
              (("1" (expand "nstruct?" -1)
                (("1" (prop)
                  (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((nth def-decl "T" list_props nil)
    (nstruct? def-decl "boolean" fj nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (fjnode type-decl nil fjnode_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (occurrencesInList_TCC3 0
  (occurrencesInList_TCC3-1 nil 3718744461
   ("" (termination-tcc) nil nil)
   ((listn_0 name-judgement "listn[fjnode[nat]](0)" fj nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (fjnode type-decl nil fjnode_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (every adt-def-decl "boolean" fjnode_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (occurrencesInList_TCC4 0
  (occurrencesInList_TCC4-1 nil 3718744461
   ("" (skeep)
    (("" (typepred "y")
      (("" (hide -1)
        (("" (inst -1 "0")
          (("1" (skeep)
            (("1" (expand "nth")
              (("1" (expand "nstruct?")
                (("1" (prop)
                  (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((nth def-decl "T" list_props nil)
    (nstruct? def-decl "boolean" fj nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (fjnode type-decl nil fjnode_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (occurrencesInList_TCC5 0
  (occurrencesInList_TCC5-1 nil 3718744461
   ("" (termination-tcc) nil nil)
   ((listn_0 name-judgement "listn[fjnode[nat]](0)" fj nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (fjnode type-decl nil fjnode_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (every adt-def-decl "boolean" fjnode_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (occurrencesInSeq_TCC1 0
  (occurrencesInSeq_TCC1-1 nil 3734986732 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (occurrencesInSeq_TCC2 0
  (occurrencesInSeq_TCC2-1 nil 3734986732
   ("" (termination-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" fjnode_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (fjnode type-decl nil fjnode_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (rest const-decl "finseq" seq_extras "structures/")
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (occurrencesInSeq_TCC3 0
  (occurrencesInSeq_TCC3-1 nil 3734986732
   ("" (skeep)
    (("" (typepred "s")
      (("" (skeep)
        (("" (inst 2 "n")
          (("" (skeep)
            (("" (expand "finseq_appl")
              (("" (case "length(s) = 1")
                (("1" (typepred "i")
                  (("1" (expand "rest")
                    (("1" (assert)
                      (("1" (expand "^")
                        (("1" (expand "empty_seq")
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (inst -1 "i+1")
                  (("1" (expand "rest")
                    (("1" (expand "^") (("1" (assert) nil nil)) nil))
                    nil)
                   ("2" (typepred "i")
                    (("2" (expand "rest" -1)
                      (("2" (assert)
                        (("2" (expand "^")
                          (("2" (expand "min") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (rest const-decl "finseq" seq_extras "structures/")
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (^ const-decl "finseq" finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (fjnode type-decl nil fjnode_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" fjnode_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (finseq type-eq-decl nil finite_sequences nil))
   nil))
 (permutation_equiv 0
  (permutation_equiv-1 nil 3733829031
   ("" (prop)
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skeep) (("2" (grind) nil nil)) nil)
     ("3" (skeep) (("3" (grind) nil nil)) nil))
    nil)
   ((listn_0 name-judgement "listn[fjnode[nat]](0)" fj nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (permutation const-decl "bool" fj nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (compare2to2_TCC1 0
  (compare2to2_TCC1-1 nil 3715637010 ("" (subtype-tcc) nil nil)
   ((odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (odd? const-decl "bool" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   shostak))
 (compare2to2_TCC2 0
  (compare2to2_TCC2-1 nil 3715637010 ("" (subtype-tcc) nil nil)
   ((mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil nat_types nil)
    (finseqfj type-eq-decl nil fj nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" fjnode_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (fjnode type-decl nil fjnode_adt nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (compare2to2_TCC3 0
  (compare2to2_TCC3-1 nil 3715637010 ("" (subtype-tcc) nil nil)
   ((odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil nat_types nil)
    (finseqfj type-eq-decl nil fj nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" fjnode_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (fjnode type-decl nil fjnode_adt nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   shostak))
 (seqfjBottleneck_TCC1 0
  (seqfjBottleneck_TCC1-1 nil 3715637010 ("" (termination-tcc) nil nil)
   ((nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (compare2to2 const-decl "finseqfj" fj nil)
    (odd? const-decl "bool" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   shostak))
 (nstruct?_TCC1 0
  (nstruct?_TCC1-1 nil 3715637010 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (fjnode type-decl nil fjnode_adt nil)
    (every adt-def-decl "boolean" fjnode_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[fjnode[nat]](0)" fj nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil nat_types nil)
    (smallerones adt-accessor-decl "[fjnode -> list[fjnode]]"
     fjnode_adt nil)
    (length def-decl "nat" list_props nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil) (< const-decl "bool" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (nstruct?_TCC2 0
  (nstruct?_TCC2-1 nil 3715637010 ("" (termination-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (length_odd_TCC1 0
  (length_odd_TCC1-1 nil 3718638316
   ("" (skeep)
    (("" (assert)
      (("" (typepred "n")
        (("" (lemma " both_sides_expt_gt1_lt")
          (("" (inst -1 "2" "n-1" "n") (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (both_sides_expt_gt1_lt formula-decl nil exponentiation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (>= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak))
 (length_odd_TCC2 0
  (length_odd_TCC2-1 nil 3734434620 ("" (termination-tcc) nil nil) nil
   nil))
 (nstructER?_TCC1 0
  (nstructER?_TCC1-1 nil 3718704824
   ("" (skeep) (("" (typepred "n") (("" (assert) nil nil)) nil)) nil)
   ((plain_finseqfj const-decl "bool" fj nil)
    (finseqfj type-eq-decl nil fj nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" fjnode_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (fjnode type-decl nil fjnode_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (^ const-decl "real" exponentiation nil)
    (>= const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   shostak))
 (nstructER?_TCC2 0
  (nstructER?_TCC2-1 nil 3718704824 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (fjnode type-decl nil fjnode_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" fjnode_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (finseqfj type-eq-decl nil fj nil)
    (plain_finseqfj const-decl "bool" fj nil)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (permutation const-decl "bool" fj nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (nstructER?_TCC3 0
  (nstructER?_TCC3-1 nil 3718704824 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (fjnode type-decl nil fjnode_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" fjnode_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (finseqfj type-eq-decl nil fj nil)
    (plain_finseqfj const-decl "bool" fj nil)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (every adt-def-decl "boolean" list_adt nil)
    (< const-decl "bool" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[fjnode[nat]](0)" fj nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (odd? const-decl "bool" integers nil)
    (permutation const-decl "bool" fj nil)
    (^ const-decl "real" exponentiation nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (nstructER?_TCC4 0
  (nstructER?_TCC4-1 nil 3718704824 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (fjnode type-decl nil fjnode_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" fjnode_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (finseqfj type-eq-decl nil fj nil)
    (plain_finseqfj const-decl "bool" fj nil)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[fjnode[nat]](0)" fj nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (odd? const-decl "bool" integers nil)
    (permutation const-decl "bool" fj nil)
    (^ const-decl "real" exponentiation nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (plain_finseqfj_nstructER0_TCC1 0
  (plain_finseqfj_nstructER0_TCC1-1 nil 3732661487
   ("" (skeep)
    (("" (typepred "s0") (("" (hide -2) (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((finseqfj type-eq-decl nil fj nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" fjnode_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (fjnode type-decl nil fjnode_adt nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (plain_finseqfj_nstructER0 0
  (plain_finseqfj_nstructER0-1 nil 3732666027
   ("" (skeep)
    (("" (expand "nstructER?")
      (("" (split)
        (("1" (expand "permutation") (("1" (propax) nil nil)) nil)
         ("2" (expand "^")
          (("2" (expand "expt") (("2" (assert) nil nil)) nil)) nil)
         ("3" (expand "plain_finseqfj") (("3" (flatten) nil nil)) nil)
         ("4" (expand "plain_finseqfj")
          (("4" (flatten)
            (("4" (expand "length_odd") (("4" (propax) nil nil)) nil))
            nil))
          nil)
         ("5" (expand "plain_finseqfj")
          (("5" (flatten) (("5" (skeep) nil nil)) nil)) nil)
         ("6" (expand "plain_finseqfj")
          (("6" (flatten) (("6" (skeep) (("6" (assert) nil nil)) nil))
            nil))
          nil)
         ("7" (expand "plain_finseqfj")
          (("7" (flatten) (("7" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((posint_exp application-judgement "posint" exponentiation nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nstructER? const-decl "bool" fj nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (listn_0 name-judgement "listn[fjnode[nat]](0)" fj nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (length_odd def-decl "nat" fj nil)
    (plain_finseqfj const-decl "bool" fj nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (expt def-decl "real" exponentiation nil)
    (permutation const-decl "bool" fj nil))
   shostak))
 (comparePeservesElements 0
  (comparePeservesElements-1 nil 3719094149
   ("" (measure-induct+ "length(s`seqfj)" ("s"))
    (("" (postpone) nil nil)) nil)
   ((> const-decl "bool" reals nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (occurrencesInSeq def-decl "nat" fj nil)
    (occurrencesInList def-decl "nat" fj nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (odd? const-decl "bool" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (^ const-decl "finseq" finite_sequences nil)
    (length def-decl "nat" list_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (smallerones adt-accessor-decl "[fjnode -> list[fjnode]]"
     fjnode_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (TRUE const-decl "bool" booleans nil)
    (rest const-decl "finseq" seq_extras "structures/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (compare2to2 const-decl "finseqfj" fj nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (finseqfj type-eq-decl nil fj nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (fjnode type-decl nil fjnode_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (seqfjBottPreservesElements 0
  (seqfjBottPreservesElements-1 nil 3733828040
   ("" (measure-induct+ "length(s`seqfj)" "s")
    (("" (postpone) nil nil)) nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (permutation_equiv formula-decl nil fj nil)
    (comparePeservesElements formula-decl nil fj nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (compare2to2 const-decl "finseqfj" fj nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (seqfjBottleneck def-decl "finseqfj" fj nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (finseqfj type-eq-decl nil fj nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (fjnode type-decl nil fjnode_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (oneStepCorrectionER_TCC1 0
  (oneStepCorrectionER_TCC1-1 nil 3718705741
   ("" (skeep)
    (("" (typepred "n")
      (("" (lemma "both_sides_expt_gt1_lt")
        (("" (inst -1 "2" "n" "n+1") (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((plain_finseqfj const-decl "bool" fj nil)
    (finseqfj type-eq-decl nil fj nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" fjnode_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (fjnode type-decl nil fjnode_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (>= const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (both_sides_expt_gt1_lt formula-decl nil exponentiation nil))
   shostak))
 (oneStepCorrectionER_TCC2 0
  (oneStepCorrectionER_TCC2-1 nil 3719264110 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (fjnode type-decl nil fjnode_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" fjnode_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (finseqfj type-eq-decl nil fj nil)
    (plain_finseqfj const-decl "bool" fj nil)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (listn_0 name-judgement "listn[fjnode[nat]](0)" fj nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nstructER? const-decl "bool" fj nil)
    (odd? const-decl "bool" integers nil)
    (^ const-decl "real" exponentiation nil)
    (permutation const-decl "bool" fj nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (oneStepCorrectionER 0
  (oneStepCorrectionER-2 nil 3733830834
   ("" (skeep)
    (("" (skeep)
      (("" (expand "nstructER?" 1)
        (("" (split)
          (("1" (lemma "comparePeservesElements")
            (("1" (inst -1 "s1")
              (("1" (expand "nstructER?")
                (("1" (flatten)
                  (("1" (hide-all-but (-1 -2 1))
                    (("1" (expand "permutation")
                      (("1" (skeep)
                        (("1" (inst -1 "x")
                          (("1" (inst -2 "x") (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "compare2to2")
            (("2" (assert)
              (("2" (expand "nstructER?")
                (("2" (flatten)
                  (("2" (hide-all-but (-2 -8 1))
                    (("2" (replaces -1)
                      (("2"
                        (case " floor(floor(s`seqfj`length / 2 ^ n) / 2) = floor(s`seqfj`length / 2 ^ n / 2)")
                        (("1" (replaces -1) (("1" (grind) nil nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (lemma "floor_div")
                            (("2"
                              (inst -1
                               "floor(s`seqfj`length / 2 ^ n / 2)" "2"
                               "floor(s`seqfj`length / 2 ^ n)")
                              (("2"
                                (assert)
                                (("2"
                                  (split)
                                  (("1" (grind) nil nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (skeep)
            (("3" (expand "nstruct?")
              (("3" (prop)
                (("1" (expand "nstructER?")
                  (("1" (flatten)
                    (("1" (hide-all-but (-3 -8 1))
                      (("1"
                        (inst -1
                         "IF val(s1`seqfj`seq(2*k)) <  val(s1`seqfj`seq(1+2*k)) THEN 1 + 2*k ELSE 2*k ENDIF")
                        (("1" (lift-if)
                          (("1" (prop)
                            (("1" (expand "compare2to2")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "length")
                                  (("1"
                                    (expand "nstruct?")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "compare2to2")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "length")
                                  (("2"
                                    (expand "nstruct?")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (typepred "k")
                            (("2" (expand "compare2to2" -1)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("3" (flatten)
                          (("3" (typepred "k")
                            (("3" (expand "compare2to2" -1)
                              (("3" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("4" (typepred "k")
                          (("4" (expand "compare2to2" -1)
                            (("4" (assert) nil nil)) nil))
                          nil)
                         ("5" (typepred "k")
                          (("5" (expand "compare2to2" -1)
                            (("5" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "nstructER?")
                  (("2" (flatten)
                    (("2" (hide-all-but (-3 -8 1))
                      (("2" (skeep)
                        (("2" (case-replace "i=0")
                          (("1" (expand "nth")
                            (("1" (expand "compare2to2")
                              (("1"
                                (prop)
                                (("1" (inst -4 "2*k") nil nil)
                                 ("2" (inst -3 "1+2*k") nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "compare2to2")
                            (("2" (lift-if)
                              (("2"
                                (prop)
                                (("1"
                                  (expand "nth")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst -3 "1+ 2*k")
                                      (("1"
                                        (expand "nstruct?" -3)
                                        (("1"
                                          (prop)
                                          (("1"
                                            (inst -3 "i-1")
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (typepred "i")
                                            (("2"
                                              (expand "compare2to2")
                                              (("2"
                                                (expand "length" -1)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "nth")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst -2 "2 * k")
                                      (("2"
                                        (expand "nstruct?" -2)
                                        (("2"
                                          (prop)
                                          (("1"
                                            (inst -3 "i-1")
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (typepred "i")
                                            (("2"
                                              (expand "compare2to2")
                                              (("2"
                                                (expand "length" -1)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("4" (expand "compare2to2")
            (("4" (assert)
              (("4" (expand "nstructER?")
                (("4" (lift-if)
                  (("4" (flatten)
                    (("4" (hide-all-but (-2 -4 -8 1))
                      (("4" (replaces -1)
                        (("4" (prop)
                          (("1" (expand "length_odd" 1)
                            (("1" (assert)
                              (("1"
                                (expand "length")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "length_odd" 2)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (skeep)
            (("5" (case-replace "m=n")
              (("1" (split)
                (("1" (flatten)
                  (("1" (inst 1 "0")
                    (("1" (expand "nth")
                      (("1" (expand "nstructER?")
                        (("1" (flatten)
                          (("1" (hide -3 -6 -7 -8 -9)
                            (("1" (expand "compare2to2")
                              (("1"
                                (replaces -3)
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst
                                     -3
                                     "floor(s`seqfj`length / 2 ^ n) - 1")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "length_odd")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (skeep)
                    (("2" (expand "compare2to2")
                      (("2" (lift-if)
                        (("2" (prop)
                          (("1" (expand "nstructER?")
                            (("1" (flatten)
                              (("1" (replaces -6) nil nil)) nil))
                            nil)
                           ("2" (expand "nstructER?")
                            (("2" (flatten)
                              (("2"
                                (hide-all-but (-1 -2 -9 -10 1 2))
                                (("2"
                                  (split)
                                  (("1"
                                    (case-replace "i=0")
                                    (("1"
                                      (hide-all-but (-2 -3))
                                      (("1"
                                        (expand "nstruct?")
                                        (("1"
                                          (expand "nth")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (case
                                       " FORALL (i: below[length(s1`oddList)] | i/=0):
                                              length(smallerones(nth(s1`oddList, 0))) >
                                               length(smallerones(nth(s1`oddList, i)))")
                                      (("1"
                                        (inst -1 "i")
                                        (("1"
                                          (hide-all-but (-1 -2 -3))
                                          (("1"
                                            (expand "nstruct?")
                                            (("1"
                                              (expand "nth" -1 1)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (induct "i")
                                        (("1" (assert) nil nil)
                                         ("2" (assert) nil nil)
                                         ("3"
                                          (skeep)
                                          (("3"
                                            (inst -6 "jb")
                                            (("3"
                                              (assert)
                                              (("3"
                                                (prop)
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "i")
                                    (("2"
                                      (hide-all-but (-1 1 2 3))
                                      (("2"
                                        (reveal -7)
                                        (("2"
                                          (expand "length_odd" -2)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (split)
                (("1" (flatten)
                  (("1" (expand "nstructER?")
                    (("1" (flatten)
                      (("1" (hide -7 -8)
                        (("1" (inst -6 "m")
                          (("1" (flatten)
                            (("1" (assert)
                              (("1"
                                (skeep)
                                (("1"
                                  (inst
                                   1
                                   "IF odd?(s1`seqfj`length) THEN i+1 ELSE i ENDIF")
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (expand "compare2to2")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "nth" 1)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "compare2to2")
                                        (("2" (assert) nil nil))
                                        nil)
                                       ("3"
                                        (expand "compare2to2")
                                        (("3" (assert) nil nil))
                                        nil)
                                       ("4"
                                        (expand "compare2to2")
                                        (("4" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (expand "length_odd")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (flatten)
                                    (("3"
                                      (expand "length_odd")
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (expand "nstructER?")
                    (("2" (flatten)
                      (("2" (hide-all-but (-1 -3 -4 -5 -6 -9 1 2))
                        (("2" (skeep)
                          (("2" (expand "compare2to2")
                            (("2" (lift-if)
                              (("2"
                                (prop)
                                (("1"
                                  (case-replace "m=0")
                                  (("1"
                                    (inst -8 "0")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (split -9)
                                        (("1" (propax) nil nil)
                                         ("2"
                                          (case-replace "i=0")
                                          (("1"
                                            (expand "nth" -4)
                                            (("1"
                                              (hide-all-but (-4 -7 3))
                                              (("1"
                                                (inst
                                                 -2
                                                 "s1`seqfj`length - 1")
                                                (("1"
                                                  (expand "nstruct?")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (reveal -8)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "nth" -3)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst 2 "i-1")
                                                (("2"
                                                  (typepred "i")
                                                  (("2"
                                                    (expand
                                                     "length_odd"
                                                     -1)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (case-replace "i=0")
                                    (("1"
                                      (expand "nth" -3)
                                      (("1"
                                        (hide-all-but (1 -3 -4 -6 1 3))
                                        (("1"
                                          (inst
                                           -3
                                           "s1`seqfj`length - 1")
                                          (("1"
                                            (expand "nstruct?")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "nth" -2)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (inst -7 "m")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (split -8)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (inst 1 "i-1")
                                                (("2"
                                                  (typepred "i")
                                                  (("2"
                                                    (expand
                                                     "length_odd"
                                                     -1)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst -6 "m")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (split -7)
                                      (("1" (propax) nil nil)
                                       ("2"
                                        (inst 1 "i")
                                        (("2"
                                          (typepred "i")
                                          (("2"
                                            (expand "length_odd" -1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("6" (skeep)
            (("6" (expand "compare2to2")
              (("6" (lift-if)
                (("6" (prop)
                  (("1" (case-replace "i=0")
                    (("1" (expand "nth")
                      (("1" (expand "nth")
                        (("1" (expand "nstructER?")
                          (("1" (flatten)
                            (("1" (hide-all-but (-3 -9 -5 -13 1))
                              (("1"
                                (split)
                                (("1"
                                  (inst -4 "s1`seqfj`length - 1")
                                  (("1"
                                    (expand "nstruct?")
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (expand "length" -2)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "nth")
                      (("2" (assert)
                        (("2" (expand "nstructER?")
                          (("2" (flatten)
                            (("2" (inst -11 "i-1")
                              (("2"
                                (assert)
                                (("2"
                                  (typepred "i")
                                  (("2"
                                    (expand "length" -5)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "nstructER?")
                    (("2" (flatten)
                      (("2" (inst -9 "i") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("7" (flatten)
            (("7" (expand "compare2to2")
              (("7" (lift-if)
                (("7" (prop)
                  (("1" (expand "nstructER?")
                    (("1" (flatten)
                      (("1" (hide-all-but (-1 -2 -8 1))
                        (("1" (inst -3 "s1`seqfj`length - 1")
                          (("1" (expand "nstruct?")
                            (("1" (assert) nil nil)) nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "nstructER?")
                    (("2" (flatten)
                      (("2" (hide-all-but (-2 -10 2))
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (fjnode type-decl nil fjnode_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" fjnode_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (finseqfj type-eq-decl nil fj nil)
    (permutation const-decl "bool" fj nil)
    (listn_0 name-judgement "listn[fjnode[nat]](0)" fj nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (comparePeservesElements formula-decl nil fj nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (floor_div formula-decl nil floor_ceil nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (expt def-decl "real" exponentiation nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (integer nonempty-type-from-decl nil integers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (plain_finseqfj const-decl "bool" fj nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (compare2to2 const-decl "finseqfj" fj nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nstruct? def-decl "boolean" fj nil)
    (every adt-def-decl "boolean" list_adt nil)
    (smallerones adt-accessor-decl "[fjnode -> list[fjnode]]"
     fjnode_adt nil)
    (nth def-decl "T" list_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (val adt-accessor-decl "[fjnode -> T]" fjnode_adt nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (s1 skolem-const-decl "finseqfj" fj nil)
    (below type-eq-decl nil nat_types nil)
    (k skolem-const-decl "below[compare2to2(s1)`seqfj`length]" fj nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (length_odd def-decl "nat" fj nil)
    (i skolem-const-decl "below[length_odd(s`seqfj`length, 1 + n)]" fj
     nil)
    (below_induction formula-decl nil bounded_nat_inductions nil)
    (below type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (n skolem-const-decl "{n: nat | 2 ^ (1 + n) <= length(s`seqfj)}" fj
     nil)
    (s skolem-const-decl "{s: finseqfj | plain_finseqfj(s)}" fj nil)
    (i skolem-const-decl "below[length_odd(s`seqfj`length, 1 + n)]" fj
     nil)
    (m skolem-const-decl "below[1 + n]" fj nil)
    (odd? const-decl "bool" integers nil)
    (i skolem-const-decl "below[length_odd(s`seqfj`length, n)]" fj nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nstructER? const-decl "bool" fj nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   shostak)
  (oneStepCorrectionER-1 nil 3718705747
   ("" (skeep)
    (("" (skeep)
      (("" (expand "nstructER?" 1)
        (("" (split)
          (("1" (lemma "comparePeservesElements")
            (("1" (inst -1 "s" "s1")
              (("1" (expand "nstructER?")
                (("1" (flatten)
                  (("1" (hide-all-but (-1 -2 1))
                    (("1" (expand "permutation")
                      (("1" (skeep)
                        (("1" (inst -1 "x")
                          (("1" (inst -2 "x") (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "compare2to2")
            (("2" (assert)
              (("2" (expand "nstructER?")
                (("2" (flatten)
                  (("2" (hide-all-but (-2 -8 1))
                    (("2" (replaces -1)
                      (("2"
                        (case " floor(floor(s`seqfj`length / 2 ^ n) / 2) = floor(s`seqfj`length / 2 ^ n / 2)")
                        (("1" (replaces -1) (("1" (grind) nil nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (lemma "floor_div")
                            (("2"
                              (inst -1
                               "floor(s`seqfj`length / 2 ^ n / 2)" "2"
                               "floor(s`seqfj`length / 2 ^ n)")
                              (("2"
                                (assert)
                                (("2"
                                  (split)
                                  (("1" (grind) nil nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (skeep)
            (("3" (expand "nstruct?")
              (("3" (prop)
                (("1" (expand "nstructER?")
                  (("1" (flatten)
                    (("1" (hide-all-but (-3 -8 1))
                      (("1"
                        (inst -1
                         "IF val(s1`seqfj`seq(2*k)) <  val(s1`seqfj`seq(1+2*k)) THEN 1 + 2*k ELSE 2*k ENDIF")
                        (("1" (lift-if)
                          (("1" (prop)
                            (("1" (expand "compare2to2")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "length")
                                  (("1"
                                    (expand "nstruct?")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "compare2to2")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "length")
                                  (("2"
                                    (expand "nstruct?")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (typepred "k")
                            (("2" (expand "compare2to2" -1)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("3" (flatten)
                          (("3" (typepred "k")
                            (("3" (expand "compare2to2" -1)
                              (("3" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("4" (typepred "k")
                          (("4" (expand "compare2to2" -1)
                            (("4" (assert) nil nil)) nil))
                          nil)
                         ("5" (typepred "k")
                          (("5" (expand "compare2to2" -1)
                            (("5" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "nstructER?")
                  (("2" (flatten)
                    (("2" (hide-all-but (-3 -8 1))
                      (("2" (skeep)
                        (("2" (case-replace "i=0")
                          (("1" (expand "nth")
                            (("1" (expand "compare2to2")
                              (("1"
                                (prop)
                                (("1" (inst -4 "2*k") nil nil)
                                 ("2" (inst -3 "1+2*k") nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "compare2to2")
                            (("2" (lift-if)
                              (("2"
                                (prop)
                                (("1"
                                  (expand "nth")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst -3 "1+ 2*k")
                                      (("1"
                                        (expand "nstruct?" -3)
                                        (("1"
                                          (prop)
                                          (("1"
                                            (inst -3 "i-1")
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (typepred "i")
                                            (("2"
                                              (expand "compare2to2")
                                              (("2"
                                                (expand "length" -1)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "nth")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst -2 "2 * k")
                                      (("2"
                                        (expand "nstruct?" -2)
                                        (("2"
                                          (prop)
                                          (("1"
                                            (inst -3 "i-1")
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (typepred "i")
                                            (("2"
                                              (expand "compare2to2")
                                              (("2"
                                                (expand "length" -1)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("4" (expand "compare2to2")
            (("4" (assert)
              (("4" (expand "nstructER?")
                (("4" (lift-if)
                  (("4" (flatten)
                    (("4" (hide-all-but (-2 -4 -8 1))
                      (("4" (replaces -1)
                        (("4" (prop)
                          (("1" (expand "length_odd" 1)
                            (("1" (assert)
                              (("1"
                                (expand "length")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "length_odd" 2)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (skeep)
            (("5" (case-replace "m=n")
              (("1" (split)
                (("1" (flatten)
                  (("1" (inst 1 "0")
                    (("1" (expand "nth")
                      (("1" (expand "nstructER?")
                        (("1" (flatten)
                          (("1" (hide -3 -6 -7 -8 -9)
                            (("1" (expand "compare2to2")
                              (("1"
                                (replaces -3)
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst
                                     -3
                                     "floor(s`seqfj`length / 2 ^ n) - 1")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "length_odd")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (skeep)
                    (("2" (expand "compare2to2")
                      (("2" (lift-if)
                        (("2" (prop)
                          (("1" (expand "nstructER?")
                            (("1" (flatten)
                              (("1" (replaces -6) nil nil)) nil))
                            nil)
                           ("2" (expand "nstructER?")
                            (("2" (flatten)
                              (("2"
                                (hide-all-but (-1 -2 -9 -10 1 2))
                                (("2"
                                  (split)
                                  (("1"
                                    (case-replace "i=0")
                                    (("1"
                                      (hide-all-but (-2 -3))
                                      (("1"
                                        (expand "nstruct?")
                                        (("1"
                                          (expand "nth")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (case
                                       " FORALL (i: below[length(s1`oddList)] | i/=0):
        length(smallerones(nth(s1`oddList, 0))) >
         length(smallerones(nth(s1`oddList, i)))")
                                      (("1"
                                        (inst -1 "i")
                                        (("1"
                                          (hide-all-but (-1 -2 -3))
                                          (("1"
                                            (expand "nstruct?")
                                            (("1"
                                              (expand "nth" -1 1)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (induct "i")
                                        (("1" (assert) nil nil)
                                         ("2" (assert) nil nil)
                                         ("3"
                                          (skeep)
                                          (("3"
                                            (inst -6 "jb")
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "i")
                                    (("2"
                                      (hide-all-but (-1 1 2 3))
                                      (("2"
                                        (reveal -7)
                                        (("2"
                                          (expand "length_odd" -2)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (split)
                (("1" (flatten)
                  (("1" (expand "nstructER?")
                    (("1" (flatten)
                      (("1" (hide -7 -8)
                        (("1" (inst -6 "m")
                          (("1" (flatten)
                            (("1" (assert)
                              (("1"
                                (skeep)
                                (("1"
                                  (inst
                                   1
                                   "IF odd?(s1`seqfj`length) THEN i+1 ELSE i ENDIF")
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (expand "compare2to2")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "nth" 1)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "compare2to2")
                                        (("2" (assert) nil nil))
                                        nil)
                                       ("3"
                                        (expand "compare2to2")
                                        (("3" (assert) nil nil))
                                        nil)
                                       ("4"
                                        (expand "compare2to2")
                                        (("4" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (expand "length_odd")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (flatten)
                                    (("3"
                                      (expand "length_odd")
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (expand "nstructER?")
                    (("2" (flatten)
                      (("2" (hide-all-but (-1 -3 -4 -5 -6 -9 1 2))
                        (("2" (skeep)
                          (("2" (expand "compare2to2")
                            (("2" (lift-if)
                              (("2"
                                (prop)
                                (("1"
                                  (case-replace "m=0")
                                  (("1"
                                    (inst -8 "0")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (split -9)
                                        (("1" (propax) nil nil)
                                         ("2"
                                          (case-replace "i=0")
                                          (("1"
                                            (expand "nth" -4)
                                            (("1"
                                              (hide-all-but (-4 -7 3))
                                              (("1"
                                                (inst
                                                 -2
                                                 "s1`seqfj`length - 1")
                                                (("1"
                                                  (expand "nstruct?")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (reveal -8)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "nth" -3)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst 2 "i-1")
                                                (("2"
                                                  (typepred "i")
                                                  (("2"
                                                    (expand
                                                     "length_odd"
                                                     -1)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (case-replace "i=0")
                                    (("1"
                                      (expand "nth" -3)
                                      (("1"
                                        (hide-all-but (1 -3 -4 -6 1 3))
                                        (("1"
                                          (inst
                                           -3
                                           "s1`seqfj`length - 1")
                                          (("1"
                                            (expand "nstruct?")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "nth" -2)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (inst -7 "m")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (split -8)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (inst 1 "i-1")
                                                (("2"
                                                  (typepred "i")
                                                  (("2"
                                                    (expand
                                                     "length_odd"
                                                     -1)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst -6 "m")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (split -7)
                                      (("1" (propax) nil nil)
                                       ("2"
                                        (inst 1 "i")
                                        (("2"
                                          (typepred "i")
                                          (("2"
                                            (expand "length_odd" -1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("6" (skeep)
            (("6" (expand "compare2to2")
              (("6" (lift-if)
                (("6" (prop)
                  (("1" (case-replace "i=0")
                    (("1" (expand "nth")
                      (("1" (expand "nth")
                        (("1" (expand "nstructER?")
                          (("1" (flatten)
                            (("1" (hide-all-but (-1 -2 -3 -6 -7 -10 1))
                              (("1"
                                (split -6)
                                (("1"
                                  (inst -5 "s1`seqfj`length - 1")
                                  (("1"
                                    (expand "nstruct?")
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (typepred "i")
                                  (("2"
                                    (expand "compare2to2")
                                    (("2"
                                      (lift-if)
                                      (("2"
                                        (prop)
                                        (("2"
                                          (expand "length" -2)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "nth")
                      (("2" (assert)
                        (("2" (expand "nstructER?")
                          (("2" (flatten)
                            (("2" (inst -8 "i-1")
                              (("1" (assert) nil nil)
                               ("2"
                                (typepred "i")
                                (("2"
                                  (expand "compare2to2")
                                  (("2"
                                    (expand "length" -1)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (typepred "i")
                    (("2" (expand "compare2to2")
                      (("2" (assert)
                        (("2" (expand "nstructER?")
                          (("2" (flatten) (("2" (inst -8 "i") nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("7" (flatten)
            (("7" (expand "compare2to2")
              (("7" (lift-if)
                (("7" (prop)
                  (("1" (expand "nstructER?")
                    (("1" (flatten)
                      (("1" (hide-all-but (-1 -2 -8 1))
                        (("1" (inst -3 "s1`seqfj`length - 1")
                          (("1" (expand "nstruct?")
                            (("1" (assert) nil nil)) nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "nstructER?")
                    (("2" (flatten)
                      (("2" (hide-all-but (-2 -10 2))
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (fjnode type-decl nil fjnode_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (finseqfj type-eq-decl nil fj nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (nstruct? def-decl "boolean" fj nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (comparePeservesElements formula-decl nil fj nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (floor_div formula-decl nil floor_ceil nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (expt def-decl "real" exponentiation nil)
    (integer nonempty-type-from-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (compare2to2 const-decl "finseqfj" fj nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (smallerones adt-accessor-decl "[fjnode -> list[fjnode]]"
     fjnode_adt nil)
    (nth def-decl "T" list_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (val adt-accessor-decl "[fjnode -> T]" fjnode_adt nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (length_odd def-decl "nat" fj nil)
    (below_induction formula-decl nil bounded_nat_inductions nil)
    (below type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (odd? const-decl "bool" integers nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nstructER? const-decl "bool" fj nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   shostak))
 (correctionER_TCC1 0
  (correctionER_TCC1-1 nil 3730179507 ("" (subtype-tcc) nil nil) nil
   shostak))
 (correctionER_TCC2 0
  (correctionER_TCC2-1 nil 3732655135
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "m")
        (("" (lemma "both_sides_expt_gt1_le")
          (("" (inst -1 "2" "m" "n")
            (("" (assert)
              (("" (replaces -3)
                (("" (expand "logb")
                  (("" (lemma "log_nat_bounds")
                    (("" (inst -1 "2" "s0`seqfj`length")
                      (("" (assert)
                        (("" (flatten) (("" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((both_sides_expt_gt1_le formula-decl nil exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (logb const-decl "nat" fj nil)
    (plain_finseqfj const-decl "bool" fj nil)
    (finseqfj type-eq-decl nil fj nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" fjnode_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (fjnode type-decl nil fjnode_adt nil)
    (above nonempty-type-eq-decl nil integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (log_nat_bounds formula-decl nil log_nat "reals/")
    (TRUE const-decl "bool" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak))
 (correctionER_TCC3 0
  (correctionER_TCC3-1 nil 3734217614
   ("" (skeep)
    (("" (skeep)
      (("" (expand "nstructER?")
        (("" (flatten)
          (("" (hide -1 -3 -4 -5 -6 -7)
            (("" (typepred "s0")
              (("" (hide -1)
                (("" (expand "logb")
                  (("" (lemma "log_nat_bounds")
                    (("" (inst -1 "2" "s0`seqfj`length")
                      (("" (assert)
                        (("" (flatten)
                          (("" (replace -5 1) (("" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((> const-decl "bool" reals nil)
    (plain_finseqfj const-decl "bool" fj nil)
    (finseqfj type-eq-decl nil fj nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" fjnode_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (fjnode type-decl nil fjnode_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (logb const-decl "nat" fj nil)
    (above nonempty-type-eq-decl nil integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (log_nat_bounds formula-decl nil log_nat "reals/")
    (nstructER? const-decl "bool" fj nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   shostak))
 (correctionER 0
  (correctionER-1 nil 3729557229
   ("" (skeep)
    (("" (measure-induct "length(s`seqfj)" "s")
      (("1" (skeep)
        (("1" (skeep)
          (("1" (expand "seqfjBottleneck" 1)
            (("1" (lift-if)
              (("1" (prop)
                (("1" (case-replace "m = logb(s0`seqfj`length,2)")
                  (("1" (hide-all-but (-2 -4))
                    (("1" (expand "nstructER?")
                      (("1" (flatten)
                        (("1" (hide-all-but (-1 -3))
                          (("1" (typepred "logb(s0`seqfj`length,2)")
                            (("1" (lemma "floor_div")
                              (("1"
                                (inst
                                 -1
                                 "1"
                                 "2 ^ logb(s0`seqfj`length, 2)"
                                 "s0`seqfj`length")
                                (("1"
                                  (assert)
                                  (("1"
                                    (hide -1 -3 -4)
                                    (("1"
                                      (split)
                                      (("1"
                                        (expand "logb")
                                        (("1"
                                          (lemma "log_nat_bounds")
                                          (("1"
                                            (inst
                                             -1
                                             "2"
                                             "s0`seqfj`length")
                                            (("1"
                                              (assert)
                                              (("1" (flatten) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "logb")
                                        (("2"
                                          (lemma "log_nat_bounds")
                                          (("2"
                                            (inst
                                             -1
                                             "2"
                                             "s0`seqfj`length")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (case-replace
                                                   "2 ^ (1 + log_nat(s0`seqfj`length, 2)`1) = 2 * 2 ^ log_nat(s0`seqfj`length, 2)`1")
                                                  (("2"
                                                    (hide-all-but (1))
                                                    (("2"
                                                      (expand "^")
                                                      (("2"
                                                        (expand
                                                         "expt"
                                                         1
                                                         1)
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst -2 "compare2to2(x)")
                    (("1" (split)
                      (("1" (propax) nil nil)
                       ("2" (inst 1 "m+1")
                        (("1" (lemma "oneStepCorrectionER")
                          (("1" (inst -1 "x" "s0" "m")
                            (("1" (assert) nil nil)
                             ("2" (typepred "m")
                              (("2"
                                (typepred " logb(s0`seqfj`length, 2)")
                                (("2"
                                  (hide -2 -5 2 4)
                                  (("2"
                                    (lemma "both_sides_expt_gt1_le")
                                    (("2"
                                      (inst
                                       -1
                                       "2"
                                       "m+1"
                                       "logb(s0`seqfj`length, 2)")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "logb")
                                          (("2"
                                            (lemma "log_nat_bounds")
                                            (("2"
                                              (inst
                                               -1
                                               "2"
                                               "s0`seqfj`length")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (typepred "m") (("2" (assert) nil nil))
                          nil))
                        nil)
                       ("3" (expand "compare2to2")
                        (("3" (assert) nil nil)) nil))
                      nil)
                     ("2" (expand "compare2to2")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (hide -1)
                  (("2" (case-replace "m=logb(s0`seqfj`length, 2)")
                    (("2" (expand "nstructER?" -1)
                      (("2" (flatten)
                        (("2" (hide-all-but (-2 1 2 4))
                          (("2" (typepred "m")
                            (("2" (case "m < logb(s0`seqfj`length, 2)")
                              (("1"
                                (lemma "floor_div")
                                (("1"
                                  (inst -1 "1" "2^m" "s0`seqfj`length")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (case-replace
                                           " 2 * 2 ^ m =  2 ^(1 + m)")
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (lemma "log_nat_bounds")
                                              (("1"
                                                (inst
                                                 -1
                                                 "2"
                                                 "s0`seqfj`length")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (case
                                                       " 2 ^ log_nat(s0`seqfj`length, 2)`1 < 2 ^ (1 + m)")
                                                      (("1"
                                                        (hide
                                                         -2
                                                         -3
                                                         -3
                                                         -4)
                                                        (("1"
                                                          (lemma
                                                           "both_sides_expt_gt1_lt")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "2"
                                                             " logb(s0`seqfj`length, 2)"
                                                             "m+1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "logb")
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (1))
                                            (("2"
                                              (expand "^")
                                              (("2"
                                                (expand "expt" 1 2)
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (hide 2)
          (("2" (hide -1)
            (("2" (replaces -1)
              (("2" (expand "logb")
                (("2" (lemma "log_nat_bounds")
                  (("2" (inst -1 "2" "s0`seqfj`length")
                    (("2" (assert) (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (skeep)
        (("3" (hide 2)
          (("3" (skeep)
            (("3" (typepred "m")
              (("3" (lemma "both_sides_expt_gt1_le")
                (("3" (inst -1 "2" "m" "n")
                  (("3" (assert)
                    (("3" (hide -2)
                      (("3" (replaces -2)
                        (("3" (expand "logb")
                          (("3" (lemma "log_nat_bounds")
                            (("3" (inst -1 "2" "s0`seqfj`length")
                              (("3"
                                (assert)
                                (("3"
                                  (flatten)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (fjnode type-decl nil fjnode_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" fjnode_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (finseqfj type-eq-decl nil fj nil) (> const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (s0 skolem-const-decl
     "{s0: finseqfj | plain_finseqfj(s0) AND s0`seqfj`length > 0}" fj
     nil)
    (plain_finseqfj const-decl "bool" fj nil)
    (logb const-decl "nat" fj nil)
    (above nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nstructER? const-decl "bool" fj nil)
    (seqfjBottleneck def-decl "finseqfj" fj nil)
    (both_sides_expt_gt1_lt formula-decl nil exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (floor_div formula-decl nil floor_ceil nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (log_nat_bounds formula-decl nil log_nat "reals/")
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (log_nat def-decl "[n: nat, {y | y < p AND x = p ^ n * y}]" log_nat
     "reals/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (expt def-decl "real" exponentiation nil)
    (integer nonempty-type-from-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (oneStepCorrectionER formula-decl nil fj nil)
    (both_sides_expt_gt1_le formula-decl nil exponentiation nil)
    (m skolem-const-decl "{m: nat | m <= logb(s0`seqfj`length, 2)}" fj
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (x skolem-const-decl "{s: finseqfj | s`seqfj`length > 0}" fj nil)
    (compare2to2 const-decl "finseqfj" fj nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (strucutural_correctionFP_TCC1 0
  (strucutural_correctionFP_TCC1-1 nil 3735039253
   ("" (skeep)
    (("" (replaces -1)
      (("" (name-replace "ll" "s0`seqfj`length")
        (("" (expand "logb")
          (("" (lemma "log_nat_bounds")
            (("" (inst -1 "2" "ll")
              (("" (beta) (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (logb const-decl "nat" fj nil)
    (above nonempty-type-eq-decl nil integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (log_nat_bounds formula-decl nil log_nat "reals/")
    (> const-decl "bool" reals nil)
    (plain_finseqfj const-decl "bool" fj nil)
    (finseqfj type-eq-decl nil fj nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" fjnode_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (fjnode type-decl nil fjnode_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (strucutural_correctionFP 0
  (strucutural_correctionFP-1 nil 3735039255
   ("" (skeep) (("" (postpone) nil nil)) nil)
   ((correctionER formula-decl nil fj nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (logb const-decl "nat" fj nil)
    (above nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (plain_finseqfj_nstructER0 formula-decl nil fj nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (log_nat def-decl "[n: nat, {y | y < p AND x = p ^ n * y}]" log_nat
     "reals/")
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (plain_finseqfj const-decl "bool" fj nil)
    (finseqfj type-eq-decl nil fj nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (fjnode type-decl nil fjnode_adt nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (lengthBottleneckIs1 0
  (lengthBottleneckIs1-1 nil 3729548176
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (lemma "correctionER")
          (("" (inst -1 "s0" "s")
            (("" (assert)
              (("" (split)
                (("1" (expand "nstructER?" -1)
                  (("1" (flatten)
                    (("1" (hide-all-but (-2 -8 1))
                      (("1" (replaces -1)
                        (("1" (lemma "floor_div")
                          (("1"
                            (inst -1 "1"
                             " 2 ^ logb(s0`seqfj`length, 2)"
                             "s0`seqfj`length")
                            (("1" (typepred "logb(s0`seqfj`length, 2)")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "logb")
                                  (("1"
                                    (lemma "log_nat_bounds")
                                    (("1"
                                      (inst -1 "2" "s0`seqfj`length")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split)
                                          (("1" (flatten) nil nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (case-replace
                                               "2 ^ (1 + log_nat(s0`seqfj`length, 2)`1) = 2 * 2 ^ log_nat(s0`seqfj`length, 2)`1")
                                              (("2"
                                                (hide-all-but (1))
                                                (("2"
                                                  (expand "^")
                                                  (("2"
                                                    (expand "expt" 1 1)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (inst 1 "m")
                  (("2" (hide -1 2)
                    (("2" (typepred "m")
                      (("2" (typepred " logb(s0`seqfj`length, 2)")
                        (("2" (lemma "both_sides_expt_gt1_lt")
                          (("2"
                            (inst -1 "2" "m"
                             "1 + logb(s0`seqfj`length, 2)")
                            (("2" (assert)
                              (("2"
                                (lemma "log_nat_bounds")
                                (("2"
                                  (expand "logb")
                                  (("2"
                                    (inst -1 "2" "s0`seqfj`length")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (flatten)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((correctionER formula-decl nil fj nil)
    (<= const-decl "bool" reals nil)
    (m skolem-const-decl "{m: nat | 2 ^ m <= s0`seqfj`length}" fj nil)
    (s0 skolem-const-decl
     "{s0: finseqfj | plain_finseqfj(s0) AND length(s0`seqfj) > 0}" fj
     nil)
    (both_sides_expt_gt1_lt formula-decl nil exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nstructER? const-decl "bool" fj nil)
    (floor_div formula-decl nil floor_ceil nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (log_nat def-decl "[n: nat, {y | y < p AND x = p ^ n * y}]" log_nat
     "reals/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (expt def-decl "real" exponentiation nil)
    (log_nat_bounds formula-decl nil log_nat "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (logb const-decl "nat" fj nil)
    (above nonempty-type-eq-decl nil integers nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (integer nonempty-type-from-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (> const-decl "bool" reals nil)
    (plain_finseqfj const-decl "bool" fj nil)
    (finseqfj type-eq-decl nil fj nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" fjnode_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (fjnode type-decl nil fjnode_adt nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (seqfjBottleneck_works 0
  (seqfjBottleneck_works-1 nil 3729556474
   ("" (skeep)
    (("" (case "length(s`seqfj)=0")
      (("1" (expand "seqfjBottleneck")
        (("1" (assert)
          (("1" (split)
            (("1" (expand "is_sorted?") (("1" (skeep) nil nil)) nil)
             ("2" (expand "permutation") (("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (split)
        (("1" (lemma "lengthBottleneckIs1")
          (("1" (inst -1 "s" "0" "s")
            (("1" (split)
              (("1" (expand "is_sorted?")
                (("1" (skeep) (("1" (assert) nil nil)) nil)) nil)
               ("2" (hide 2)
                (("2" (lemma "plain_finseqfj_nstructER0")
                  (("2" (inst -1 "s")
                    (("1" (assert) nil nil)
                     ("2" (expand "plain_finseqfj")
                      (("2" (flatten) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil)
             ("3" (expand "^")
              (("3" (expand "expt") (("3" (assert) nil nil)) nil)) nil)
             ("4" (assert) nil nil))
            nil))
          nil)
         ("2" (lemma "correctionER")
          (("2" (inst -1 "s" "s")
            (("1" (assert)
              (("1" (split)
                (("1" (expand "nstructER?") (("1" (propax) nil nil))
                  nil)
                 ("2" (inst 1 "0")
                  (("2" (lemma "plain_finseqfj_nstructER0")
                    (("2" (inst -1 "s") (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil) ("3" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseqfj type-eq-decl nil fj nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" fjnode_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (fjnode type-decl nil fjnode_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (permutation const-decl "bool" fj nil)
    (is_sorted? const-decl "bool" fj nil)
    (seqfjBottleneck def-decl "finseqfj" fj nil)
    (correctionER formula-decl nil fj nil)
    (logb const-decl "nat" fj nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nstructER? const-decl "bool" fj nil)
    (lengthBottleneckIs1 formula-decl nil fj nil)
    (expt def-decl "real" exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (plain_finseqfj_nstructER0 formula-decl nil fj nil)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (> const-decl "bool" reals nil)
    (s skolem-const-decl "finseqfj" fj nil)
    (plain_finseqfj const-decl "bool" fj nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   shostak)))

