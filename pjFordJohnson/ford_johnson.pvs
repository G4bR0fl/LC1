
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%	Ford-Johnson sorting algorithm (over the type nat)
%%      -- FIRST PHASE --
%%      Authors: Nikson Fernandes and Mauricio Ayala-Rincon
%%      Last modified: 11 May 2018
%%
%%  Questions proposed as short project in Computational Logic 2018/I
%% 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% "fjnode" is the Ford-Johnson main data structure. It includes a key (val),
% its list of siblings (smallerones) and a flag (a?) used to indicate whether 
% the key won or lose the last comparison.

fjnode [T: TYPE]: DATATYPE 
 BEGIN
  consFjnode(val: T, smallerones: list[fjnode], a?: boolean):consFjnode?
END fjnode

fj: THEORY
 BEGIN
  IMPORTING fjnode[nat], 
            structures@listn[fjnode[nat]], structures@seq_extras[fjnode[nat]],
	    sorting_seq, reals@log_nat

  k,i,j,n : VAR nat
  s: var finseq[fjnode[nat]]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%			Auxiliary functions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% Logarithm basis b function defined as a singleton set
logb(y: {x:real | x >= 1}, b: above(1)) : nat = log_nat(y,b)`1


% Logarithm (basis b) of exponential is the identity - General
% results on log_nat are available at reals@log_nat nasalib theory.
log_exp: LEMMA
FORALL(b:above(1)): logb(b^n,b) = n  


% The same as is_sorted? (for sequences and lists), but now for the root values
% in sequences of fjnodes.
is_sorted?(s): bool =
FORALL (i : below[length(s)]) :
    0 <= i AND i <= length(s) - 2 => val(s(i)) <= val(s(i+1))


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% The type finseqfj contains a sequence of fjnodes rooting trees with the
%% same deep and a list of fjnodes rooting trees of different decreasing deeps. 
%% In the sequence, pairs of roots of fjnodes are sorted, while in the 
%% list (oddList) fjnodes rooting trees that have not a pair are being
%% included during the first phase of the Ford-Johnson algorithm.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
finseqfj: TYPE = [# seqfj: finseq[fjnode[nat]], oddList: list[fjnode[nat]] #]
  s1: var finseqfj

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%    more auxiliary definitions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

occurrencesInList(y:list[fjnode[nat]])(x:nat): RECURSIVE nat = 
  IF length(y) = 0 THEN 0
  ELSIF val(car(y)) = x THEN
    1 + occurrencesInList(smallerones(car(y)))(x)
      + occurrencesInList(cdr(y))(x)
  ELSE
      occurrencesInList(smallerones(car(y)))(x)
    + occurrencesInList(cdr(y))(x)
  ENDIF
MEASURE length(y)

occurrencesInSeq(s)(x:nat): RECURSIVE nat =
  IF length(s) = 0 THEN 0
  ELSIF val(s(0)) = x THEN
    1 + occurrencesInList(smallerones(s(0)))(x)
      + occurrencesInSeq(rest(s))(x)
  ELSE
        occurrencesInList(smallerones(s(0)))(x)
      + occurrencesInSeq(rest(s))(x)
  ENDIF
MEASURE length(s)

permutation(s1,s2: finseq[fjnode[nat]]): bool =
FORALL(x:nat):
  occurrencesInSeq(s1)(x) =
  occurrencesInSeq(s2)(x)

permutation(s1,s2:finseqfj): bool =
FORALL(x:nat):
  occurrencesInSeq(s1`seqfj)(x) +  occurrencesInList(s1`oddList)(x) =
  occurrencesInSeq(s2`seqfj)(x) +  occurrencesInList(s2`oddList)(x)

permutation_equiv :  LEMMA
(FORALL (s: finseqfj) : permutation(s,s) ) AND
(FORALL (s, s1 : finseqfj) : permutation(s, s1) IFF permutation(s1,s) )AND
(FORALL (s, s1, s2: finseqfj) : permutation(s, s1) AND permutation(s1,s2) IMPLIES permutation(s, s2) )

%%XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
%% FIRST PHASE of the Ford-Johnson algorithm XX
%%XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX


%% compare2to2 compares pairs of roots of fjnodes in a finseqfj structure
%% and halves the sequence of fjnodes buiding trees by increasing their
%% deep in one. If the length of the sequence is odd, the last fjnode is
%% included in the oddList.
compare2to2(s1): finseqfj =
IF s1`seqfj`length > 1 THEN
(# seqfj :=
   (#length := floor(s1`seqfj`length/2),
	seq := (LAMBDA (i:below[floor(s1`seqfj`length/2)]): 
	        (IF val(s1`seqfj`seq(2*i)) < val(s1`seqfj`seq(2*i+1)) THEN
	          consFjnode(val(s1`seqfj`seq(2*i+1)),
		             cons(s1`seqfj`seq(2*i),
			          smallerones(s1`seqfj`seq(2*i+1))),
                             FALSE)
                 ELSE
		  consFjnode(val(s1`seqfj`seq(2*i)),
                             cons(s1`seqfj`seq(2*i+1),
                             smallerones(s1`seqfj`seq(2*i))),
			     FALSE)
                ENDIF))
    #),
    oddList := IF odd?(s1`seqfj`length) THEN
                cons(s1`seqfj`seq(s1`seqfj`length-1), s1`oddList)
               ELSE s1`oddList
	       ENDIF
#)
ELSE s1
ENDIF

%% seqfjBottleneck  applies recursively comapre2to2 to a flat s1 finseqfj
%% with a l length sequence of single root fjnodes and an empty oddList,
%% until the finseqfj structure consists just of a one length sequence of
%% fjnodes, that is a single fjnode with 2^(floor(log(l,2))) nodes and
%% the corresponding list consisting of the remaining odd fjnodes. 
seqfjBottleneck(s1): RECURSIVE finseqfj =
 IF s1`seqfj`length > 1 THEN seqfjBottleneck(compare2to2(s1))
 ELSE s1
 ENDIF
MEASURE s1`seqfj`length

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%  Correction of the first phase
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%  The predicate nstruct? holds for fjnodes that have the strucutre of
%%  F.-J. binary trees with 2^n nodes
nstruct?(node:fjnode)(n): RECURSIVE boolean =
	IF n>0 THEN
		length(smallerones(node)) = n AND 
		FORALL(i:below[length(smallerones(node))]):nstruct?(nth(smallerones(node),i))(n-1-i)
	ELSE 	length(smallerones(node)) = 0 ENDIF
MEASURE n

%% length_odd computes the exact length of the list of odd fjnodes after
%% n levels of recusion in the first and second phase of the FJ algorithm.
%% In the first phase it is used increasingly while in the second decreasingly. 
length_odd(l:nat,n | 2^n <= l) : RECURSIVE nat =
  IF n = 0  THEN 0
  ELSE (IF odd?(floor(l/2^(n-1))) THEN 1 ELSE 0 ENDIF) + length_odd(l,n-1)
  ENDIF 
MEASURE n

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% plain_finseqfj characterizes finseqfj structures that consist of a 
% sequence of roots and an empty odd list
plain_finseqfj(s1): bool =
   ( FORALL(i:below[length(s1`seqfj)]) : nstruct?(s1`seqfj`seq(i))(0)) AND
      length(s1`oddList) = 0

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% nstructER? is the predicate that characterizes finseqfj structures s1, 
%% built from an input flattened sequence s, with the correct expected
%% organization after n recursive steps in the fist phase of the algorithm:
%% s and s1 have the same contents (they are "permutations"), the length of
%% the sequence is exactly what should be (floor(l/2^n)), each fjnode in thecs
%% sequence is an nstruct? of deep n, and the list of odd fjnodes has the
%% exact required length, length_odd(l,n), rooted by fjnodes with the exact
%% deep and that satisfy the predicate nstruct?   
nstructER?(s:finseqfj | plain_finseqfj(s))(s1, (n:nat | 2^n <= length(s`seqfj))) : bool =
LET l = s`seqfj`length IN
  permutation(s, s1) AND 
  s1`seqfj`length = floor(l/2^n) AND
  (FORALL(k:below[s1`seqfj`length]):
    nstruct?(s1`seqfj`seq(k))(n)) AND
  LET lOdd = length_odd(l,n)  IN
  length(s1`oddList) = lOdd AND
  (FORALL(m:below[n]) : odd?(floor(l/2^m)) <=>
    EXISTS(i:below[lOdd]) : nstruct?(nth(s1`oddList,i))(m)) AND
   (FORALL(i:below[length(s1`oddList)]):
    i < length(s1`oddList) - 1 IMPLIES length(smallerones(nth(s1`oddList,i)))>length(smallerones(nth(s1`oddList,i+1)))) AND
   (length(s1`oddList)>0 => length(smallerones(car(s1`oddList))) < n)


% A simple lemma on nstructER?
  plain_finseqfj_nstructER0: LEMMA
    FORALL(s0:finseqfj | length(s0`seqfj) > 0): plain_finseqfj(s0) => nstructER?(s0)(s0,0)

%XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
% QUESTION 01  use induction on the length of s to prove that 
% one single application of compare2to2 preserves contents
% Use the proof command  (measure-induct+ "length(s`seqfj)" ("s"))
%XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
comparePeservesElements: CONJECTURE
FORALL(s:finseqfj):  permutation(s,compare2to2(s))


%XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
% QUESTION 02  again use induction on the length of s to prove
% that the fist phase of the Ford-Johnson algorithm preserves
% contents of the input.
%XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
seqfjBottPreservesElements : CONJECTURE
FORALL(s:finseqfj): permutation(s,seqfjBottleneck(s))


% Every structure generated in each step of the first phase is indeed
% a correct nstructER? structure. However, after each step the length
% of the main sequence divides by two and the deep of the nstruct
% structures increases by one. 	
oneStepCorrectionER : LEMMA
FORALL (s:finseqfj | plain_finseqfj(s))(n : nat | 2^(n+1) <= length(s`seqfj)):
  (nstructER?(s)(s1, n) AND length(s1`seqfj)>1 IMPLIES nstructER?(s)(compare2to2(s1),n+1))


% The previous property holds during the whole first phase; thus, it holds for the
% output structure given in this phase. 
correctionER: LEMMA
  FORALL (s0:finseqfj | plain_finseqfj(s0) AND s0`seqfj`length>0) (s:finseqfj | s`seqfj`length > 0):
  LET n =  logb(s0`seqfj`length,2) IN
   (EXISTS(m: nat | m<=n):nstructER?(s0)(s,m)) => nstructER?(s0)(seqfjBottleneck(s), n)



%XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
% QUESTION 03  apply previous lemmas to prove that the final
% structure of the first phase holds the nstructER? predicate
% You will require lemmas on log_nat and exponential in the
% prelude libraries
%XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

strucutural_correctionFP : CONJECTURE
FORALL (s0:finseqfj | plain_finseqfj(s0) AND s0`seqfj`length>0) (s:finseqfj | s`seqfj`length > 0):
  LET n =  logb(s0`seqfj`length,2) IN nstructER?(s0)(seqfjBottleneck(s0), n)



% The final length of main sequence in first phase is 1
lengthBottleneckIs1: LEMMA
  FORALL (s0:finseqfj | plain_finseqfj(s0) AND length(s0`seqfj)>0)(m:nat| 2^m <=s0`seqfj`length)
        (s:finseqfj | s`seqfj`length > 0 ):
        nstructER?(s0)(s,m) => seqfjBottleneck(s)`seqfj`length = 1

% The first phase of algorithm is sorted (have length = 1)  and preserves all nodes 
seqfjBottleneck_works: LEMMA
FORALL(s: finseqfj) :
    plain_finseqfj(s) =>
    (is_sorted?(seqfjBottleneck(s)`seqfj)  AND
    permutation(s, seqfjBottleneck(s)))

End fj
